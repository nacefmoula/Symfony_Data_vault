{% extends 'base.html.twig' %}

{% block title %}My Documents{% endblock %}

{% block body %}
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h2 fw-bold">My Documents</h1>
        <a href="{{ path('app_document_new') }}" class="btn btn-primary">
            <i class="fas fa-plus me-1"></i> Upload New Document
        </a>
    </div>

    <!-- Search Section -->
    <div class="row mb-4">
        <div class="col-lg-6">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text"
                       class="form-control border-start-0"
                       id="searchInput"
                       placeholder="Search documents by title..."
                       value="{{ searchTerm|default('') }}"
                       autocomplete="off">
                <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Loading indicator -->
    <div id="searchLoading" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Searching...</span>
        </div>
    </div>

    <!-- Documents container -->
    <div id="documentsContainer">
        {% include 'document/_search_results.html.twig' %}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const clearSearch = document.getElementById('clearSearch');
            const documentsContainer = document.getElementById('documentsContainer');
            const loadingIndicator = document.getElementById('searchLoading');
            let searchTimeout;

            function performSearch() {
                const searchTerm = searchInput.value.trim();

                // Show loading indicator
                loadingIndicator.classList.remove('d-none');
                documentsContainer.style.opacity = '0.6';

                // Prepare the search URL
                const url = new URL('{{ path('app_document_index') }}', window.location.origin);
                if (searchTerm) {
                    url.searchParams.set('search', searchTerm);
                }

                fetch(url, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.text())
                .then(html => {
                    documentsContainer.innerHTML = html;
                    loadingIndicator.classList.add('d-none');
                    documentsContainer.style.opacity = '1';
                })
                .catch(error => {
                    console.error('Search error:', error);
                    loadingIndicator.classList.add('d-none');
                    documentsContainer.style.opacity = '1';
                });
            }

            // Search on input with debouncing
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(performSearch, 300);
            });

            // Clear search
            clearSearch.addEventListener('click', function() {
                searchInput.value = '';
                performSearch();
                searchInput.focus();
            });

            // Handle enter key
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    clearTimeout(searchTimeout);
                    performSearch();
                }
            });
        });
    </script>
{% endblock %}
